{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "text",
      "version": 600,
      "versionNonce": 2005070080,
      "index": "a0",
      "isDeleted": false,
      "id": "VyJw-9UnVO85Ai-VUsjAZ",
      "fillStyle": "cross-hatch",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 246.93084385084074,
      "y": 132.07421875,
      "strokeColor": "#000000",
      "backgroundColor": "#fff",
      "width": 1310.0347900390625,
      "height": 45.093749999999986,
      "seed": 896043666,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1754429653787,
      "link": null,
      "locked": false,
      "fontSize": 35.29076086956521,
      "fontFamily": 1,
      "text": "Distributed Message Queue - Kafka (Notes from Claude from Alex's Book)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Distributed Message Queue - Kafka (Notes from Claude from Alex's Book)",
      "autoResize": true,
      "lineHeight": 1.2777777777777777
    },
    {
      "type": "arrow",
      "version": 376,
      "versionNonce": 778303802,
      "index": "b0p",
      "isDeleted": false,
      "id": "ycob7oF-X4j3-heM_WUL-",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1323.1862864980512,
      "y": 1787.7193703776336,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 0,
      "height": 0,
      "seed": 663972818,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1746460407653,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "type": "rectangle",
      "version": 2573,
      "versionNonce": 1640502778,
      "index": "b1NV",
      "isDeleted": false,
      "id": "8ULS5-rZxCV2xuA8jbPX6",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 233.07419795658916,
      "y": 468.3330404220922,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 494.0215504146997,
      "height": 264.8133730122177,
      "seed": 165082168,
      "groupIds": [
        "Ki8P9I8WHhYtTTr8Yfqfz"
      ],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1746460473537,
      "link": null,
      "locked": false
    },
    {
      "id": "2E5KZI95clbuq4pEsdq9N",
      "type": "text",
      "x": 244.14563318819268,
      "y": 482.7726998950265,
      "width": 290.2857360839844,
      "height": 130.81085722993527,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Ki8P9I8WHhYtTTr8Yfqfz"
      ],
      "frameId": null,
      "index": "b1O",
      "roundness": null,
      "seed": 1813313352,
      "version": 212,
      "versionNonce": 1489119792,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1754339091749,
      "link": null,
      "locked": false,
      "text": "Non Functional Requirements\n\n- High Durable\n- Hign Scalable\n- Low latency",
      "fontSize": 20.929737156789642,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Non Functional Requirements\n\n- High Durable\n- Hign Scalable\n- Low latency",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 2450,
      "versionNonce": 1928138470,
      "index": "b1RV",
      "isDeleted": false,
      "id": "m-EddKns-1R41v_YIRSCg",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 241.50117442059752,
      "y": 190.4848260003704,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 472.07621071766613,
      "height": 253.04987924925925,
      "seed": 764002190,
      "groupIds": [
        "OjbQMPIJmAlCOnx2dohXJ"
      ],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1746460468520,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 575,
      "versionNonce": 1447747328,
      "index": "b1S",
      "isDeleted": false,
      "id": "7tCFQmaEG36BU5nQPzhOl",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 259.47727443147244,
      "y": 210.47321593944915,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 435.93533575303945,
      "height": 200,
      "seed": 2071874616,
      "groupIds": [
        "OjbQMPIJmAlCOnx2dohXJ"
      ],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1754427859063,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 5,
      "text": "Functional Requirements\n- Message is small, only text\n- Configurable retention for message\n- Message are stored durably\n- Messages can be consumed by multiple\nconsumers\n- Supports of delivery semantics\n- Support message ordering",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Functional Requirements\n- Message is small, only text\n- Configurable retention for message\n- Message are stored durably\n- Messages can be consumed by multiple consumers\n- Supports of delivery semantics\n- Support message ordering",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 5305,
      "versionNonce": 1886474496,
      "index": "b1x",
      "isDeleted": false,
      "id": "Qr8kzSnfEQPAeLquWjnP3",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 774.998937167152,
      "y": 215.33071374792866,
      "strokeColor": "#495057",
      "backgroundColor": "#fff",
      "width": 896.4120084608505,
      "height": 1289.2048894018362,
      "seed": 1427102930,
      "groupIds": [
        "SwfGgqDA8s2v6k3oYsPX9",
        "9BxDMsFjB4wnoH0InfnxJ"
      ],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1754429294001,
      "link": null,
      "locked": false,
      "fontSize": 12.892048894018362,
      "fontFamily": 1,
      "text": "High Level Design\n\nMessaging Models\n\nPoint-to-Point\n\n- Message consumed by single consumer only\n- Consumer acknowledges consumption, message is removed\n- Uses consumer groups for multiple consumers\n\nPublish-Subscribe\n\n-Messages sent to topics (categories to organize messages)\n-Consumers subscribe to topics\n-Multiple consumers can receive same message\n\nTopics, Partitions, and Brokers\n\nTopic: A way to organizing messages\nPartition: Each topics is dived into partitions for scaling. Paritions are evenly distrubuted on the servers in the message queue cluster.\n\nMessages are sent to the partitions either via round robin or, if the message has a key, via hashing the key modulo the number of\nparititons.\n\nBrokers\n\nServers that hold partitions\nEach consumer typically assigned to specific partition\n\nHigh-Level Architecture Components\nClient Layer\n\nProducer: Pushes messages to queue\nConsumer: Subscribes and consumes messages\n\nCore Service and Storage\n\nBroker: Server holding multiple partitions\nData Storage: Messages persisted in partitions\nState Storage: Consumer states and progress\nMetadata Storage: Topic configuration and properties\n\nCoordination Service\n\nService Discovery: Locate available brokers\nLeader Election: One broker acts as active controller\nUses Apache ZooKeeper or ETCD for coordination\n\nDesign Philosophy\n\nUse on-disk data structure leveraging sequential access performance\nMessages not modified to reduce copying overhead\nEncourage batching at all levels:\n\nProducers send in batches\nQueue persists in larger batches\nConsumers fetch in batches\n\n\nData Storage Design\nWrite-Ahead Log (WAL) \n\nPlain file where new entries are appended\nSame concept as MySQL redo log and ZooKeeper WAL\nSequential disk access performance: Several hundred MB/sec read/write\nCost effective: Rotational disks have large capacity and affordable\nSimple: Avoids complexity of database systems\n\nMessage Data Structure\nField       | Data Type\n------------|----------\nkey         | byte[]\nvalue       | byte[]\ntopic       | string\npartition   | int\noffset      | long\ntimestamp   | long\nsize        | int\ncrc         | int\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "High Level Design\n\nMessaging Models\n\nPoint-to-Point\n\n- Message consumed by single consumer only\n- Consumer acknowledges consumption, message is removed\n- Uses consumer groups for multiple consumers\n\nPublish-Subscribe\n\n-Messages sent to topics (categories to organize messages)\n-Consumers subscribe to topics\n-Multiple consumers can receive same message\n\nTopics, Partitions, and Brokers\n\nTopic: A way to organizing messages\nPartition: Each topics is dived into partitions for scaling. Paritions are evenly distrubuted on the servers in the message queue cluster.\n\nMessages are sent to the partitions either via round robin or, if the message has a key, via hashing the key modulo the number of parititons.\n\nBrokers\n\nServers that hold partitions\nEach consumer typically assigned to specific partition\n\nHigh-Level Architecture Components\nClient Layer\n\nProducer: Pushes messages to queue\nConsumer: Subscribes and consumes messages\n\nCore Service and Storage\n\nBroker: Server holding multiple partitions\nData Storage: Messages persisted in partitions\nState Storage: Consumer states and progress\nMetadata Storage: Topic configuration and properties\n\nCoordination Service\n\nService Discovery: Locate available brokers\nLeader Election: One broker acts as active controller\nUses Apache ZooKeeper or ETCD for coordination\n\nDesign Philosophy\n\nUse on-disk data structure leveraging sequential access performance\nMessages not modified to reduce copying overhead\nEncourage batching at all levels:\n\nProducers send in batches\nQueue persists in larger batches\nConsumers fetch in batches\n\n\nData Storage Design\nWrite-Ahead Log (WAL) \n\nPlain file where new entries are appended\nSame concept as MySQL redo log and ZooKeeper WAL\nSequential disk access performance: Several hundred MB/sec read/write\nCost effective: Rotational disks have large capacity and affordable\nSimple: Avoids complexity of database systems\n\nMessage Data Structure\nField       | Data Type\n------------|----------\nkey         | byte[]\nvalue       | byte[]\ntopic       | string\npartition   | int\noffset      | long\ntimestamp   | long\nsize        | int\ncrc         | int\n",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "VI5BvpK0_x-Ik_bLR-PwY",
      "type": "rectangle",
      "x": 769.1905400197968,
      "y": 200.70433624633432,
      "width": 888.7040304412003,
      "height": 1332.9706966005388,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "9BxDMsFjB4wnoH0InfnxJ"
      ],
      "frameId": null,
      "index": "b1y",
      "roundness": {
        "type": 3
      },
      "seed": 2135449344,
      "version": 325,
      "versionNonce": 1478439168,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754429294001,
      "link": null,
      "locked": false
    },
    {
      "id": "FlbLFTCKrqznVL6vkCNAS",
      "type": "text",
      "x": 1707.633425646669,
      "y": 204.06798003291544,
      "width": 660.4571255454046,
      "height": 1287.8608676413778,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Btfi5hyQ2qgUU6Fym-Bxc"
      ],
      "frameId": null,
      "index": "b3J",
      "roundness": null,
      "seed": 1855323904,
      "version": 364,
      "versionNonce": 844673280,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754429485949,
      "link": null,
      "locked": false,
      "text": "Key Points:\n\nMessage key: Determines partition (random if not defined)\nValue: Actual message payload\nLocation: Message found using topic + partition + offset\n\nProducer Flow\nBasic Flow\n\nProducer sends message to routing layer\nRouting layer reads partition count from metadata storage\nRoutes message to active leader partition\nFollowers replicate the data\nLeader commits data and sends ACK to producer\n\nReplication for Availability\n\nLeader-Follower model: Improves fault tolerance\nIn-Sync Replicas (ISR): Tracks which replicas are synchronized\nConfigurable ACK levels: Control durability vs performance\n\nDrawbacks of Routing Layer\n\nAdditional network latency\nRequest batching not optimized\n\nAlternative: Embedded Routing\n\nAdd routing logic directly into producers and consumers\nEliminates separate routing layer overhead\n\nConsumer Flow\nPush vs Pull Models\nPush Model:\n\nPros: Low latency, messages read immediately\nCons:\nConsumers can be overwhelmed\nBroker controls rate, hard to handle diverse consumer capabilities\n\nPull Model (Selected):\n\nPros:\nConsumers control consumption rate\nCan add/remove consumers to adjust processing rate\nBetter for batch processing\n\n\nImplementation: Consumers periodically poll for new messages\n\n",
      "fontSize": 20.20173910025691,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Key Points:\n\nMessage key: Determines partition (random if not defined)\nValue: Actual message payload\nLocation: Message found using topic + partition + offset\n\nProducer Flow\nBasic Flow\n\nProducer sends message to routing layer\nRouting layer reads partition count from metadata storage\nRoutes message to active leader partition\nFollowers replicate the data\nLeader commits data and sends ACK to producer\n\nReplication for Availability\n\nLeader-Follower model: Improves fault tolerance\nIn-Sync Replicas (ISR): Tracks which replicas are synchronized\nConfigurable ACK levels: Control durability vs performance\n\nDrawbacks of Routing Layer\n\nAdditional network latency\nRequest batching not optimized\n\nAlternative: Embedded Routing\n\nAdd routing logic directly into producers and consumers\nEliminates separate routing layer overhead\n\nConsumer Flow\nPush vs Pull Models\nPush Model:\n\nPros: Low latency, messages read immediately\nCons:\nConsumers can be overwhelmed\nBroker controls rate, hard to handle diverse consumer capabilities\n\nPull Model (Selected):\n\nPros:\nConsumers control consumption rate\nCan add/remove consumers to adjust processing rate\nBetter for batch processing\n\n\nImplementation: Consumers periodically poll for new messages\n\n",
      "autoResize": false,
      "lineHeight": 1.25
    },
    {
      "id": "VLcdavX_T5JnrwaCFok7j",
      "type": "rectangle",
      "x": 1700.6789321684282,
      "y": 198.18142741251916,
      "width": 665.5950707336473,
      "height": 1353.6747862153866,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Btfi5hyQ2qgUU6Fym-Bxc"
      ],
      "frameId": null,
      "index": "b3K",
      "roundness": {
        "type": 3
      },
      "seed": 1825267456,
      "version": 209,
      "versionNonce": 1560092416,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754429489882,
      "link": null,
      "locked": false
    },
    {
      "id": "pHmw9xRttjIQBq7tUidAj",
      "type": "text",
      "x": 2405.648790307098,
      "y": 205.3247873168963,
      "width": 676.1795043945312,
      "height": 1600,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Plu9ZOr2NmZHwZC8nzYW0"
      ],
      "frameId": null,
      "index": "b3L",
      "roundness": null,
      "seed": 742330624,
      "version": 79,
      "versionNonce": 877756160,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754429600212,
      "link": null,
      "locked": false,
      "text": "Advanced Features\nMessage Ordering\n\nGlobal ordering: Single partition (limits scalability)\nPartition-level ordering: Messages ordered within each partition\nKey-based partitioning: Messages with same key go to same partition\n\nDelivery Semantics\nAt-Most-Once:\n\nMessage delivered zero or one time\nPossible message loss, no duplicates\nLowest overhead\n\nAt-Least-Once:\n\nMessage delivered one or more times\nNo message loss, possible duplicates\nConsumer must handle duplicates\n\nExactly-Once:\n\nMessage delivered exactly one time\nMost complex to implement\nHighest overhead but strongest guarantee\n\nConsumer Groups\n\nMultiple consumers process messages in parallel\nEach partition assigned to one consumer in group\nAutomatic rebalancing when consumers join/leave\n\nMessage Retention\n\nTime-based retention (e.g., 2 weeks)\nSize-based retention\nCompaction for key-based topics\n\nHorizontal Scaling\n\nPartition scaling: Increase partitions per topic\nBroker scaling: Add more broker servers\nConsumer scaling: Add consumers to consumer groups\n\nPerformance Optimizations\n\nBatch processing: Group operations for efficiency\nCompression: Reduce network and storage overhead\nZero-copy: Minimize data copying between kernel and user space\nPage cache: Leverage OS disk caching\n\nMonitoring and Operations\n\nMetrics: Throughput, latency, consumer lag\nHealth checks: Broker and partition status\nAlerting: Automated notifications for issues\nCapacity planning: Monitor growth trends\n\nFault Tolerance\n\nMulti-region replication: Cross-datacenter redundancy\nAutomatic failover: Leader election on failures\nData recovery: Rebuild from replicas\nCircuit breakers: Prevent cascade failures",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Advanced Features\nMessage Ordering\n\nGlobal ordering: Single partition (limits scalability)\nPartition-level ordering: Messages ordered within each partition\nKey-based partitioning: Messages with same key go to same partition\n\nDelivery Semantics\nAt-Most-Once:\n\nMessage delivered zero or one time\nPossible message loss, no duplicates\nLowest overhead\n\nAt-Least-Once:\n\nMessage delivered one or more times\nNo message loss, possible duplicates\nConsumer must handle duplicates\n\nExactly-Once:\n\nMessage delivered exactly one time\nMost complex to implement\nHighest overhead but strongest guarantee\n\nConsumer Groups\n\nMultiple consumers process messages in parallel\nEach partition assigned to one consumer in group\nAutomatic rebalancing when consumers join/leave\n\nMessage Retention\n\nTime-based retention (e.g., 2 weeks)\nSize-based retention\nCompaction for key-based topics\n\nHorizontal Scaling\n\nPartition scaling: Increase partitions per topic\nBroker scaling: Add more broker servers\nConsumer scaling: Add consumers to consumer groups\n\nPerformance Optimizations\n\nBatch processing: Group operations for efficiency\nCompression: Reduce network and storage overhead\nZero-copy: Minimize data copying between kernel and user space\nPage cache: Leverage OS disk caching\n\nMonitoring and Operations\n\nMetrics: Throughput, latency, consumer lag\nHealth checks: Broker and partition status\nAlerting: Automated notifications for issues\nCapacity planning: Monitor growth trends\n\nFault Tolerance\n\nMulti-region replication: Cross-datacenter redundancy\nAutomatic failover: Leader election on failures\nData recovery: Rebuild from replicas\nCircuit breakers: Prevent cascade failures",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "TQFWGzE6EpiVl4TDO3gPd",
      "type": "rectangle",
      "x": 2393.556250020046,
      "y": 194.53001046059393,
      "width": 701.4361746392278,
      "height": 1611.9572277442187,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [
        "Plu9ZOr2NmZHwZC8nzYW0"
      ],
      "frameId": null,
      "index": "b3M",
      "roundness": {
        "type": 3
      },
      "seed": 2048630528,
      "version": 162,
      "versionNonce": 315224320,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1754429600212,
      "link": null,
      "locked": false
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}